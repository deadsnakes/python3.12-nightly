Change the jump opcodes so that all conditional jumps are forward jumps.
Backward jumps are converted by the assembler into a conditional forward
jump whose target is the fallthrough block (and with a reversed condition),
followed by an unconditional backward jump. For example:

``POP_JUMP_IF_TRUE BACKWARD_TARGET`` becomes ``POP_JUMP_IF_FALSE NEXT_BLOCK;
JUMP BACKWARD_TARGET``.

All the directed conditional jump opcodes were removed:
``POP_JUMP_FORWARD_IF_TRUE``, ``POP_JUMP_BACKWARD_IF_TRUE``,
``POP_JUMP_FORWARD_IF_FALSE``, ``POP_JUMP_BACKWARD_IF_FALSE``,
``POP_JUMP_FORWARD_IF_NONE``, ``POP_JUMP_BACKWARD_IF_NONE``,
``POP_JUMP_FORWARD_IF_NOT_NONE``, ``POP_JUMP_BACKWARD_IF_NOT_NONE``.

The corresponding opcodes without direction are no longer pseudo-instructions,
and they implement the forward conditional jumps.
